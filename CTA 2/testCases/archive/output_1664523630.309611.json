{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "cls = _pytest.runner.CallInfo\nfunc = <function call_runtest_hook.<locals>.<lambda> at 0x7f0d53849510>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n../../../.local/lib/python3.6/site-packages/_pytest/runner.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.local/lib/python3.6/site-packages/_pytest/runner.py:255: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n../../../.local/lib/python3.6/site-packages/pluggy/hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n../../../.local/lib/python3.6/site-packages/pluggy/manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n../../../.local/lib/python3.6/site-packages/pluggy/manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n../../../.local/lib/python3.6/site-packages/_pytest/runner.py:150: in pytest_runtest_setup\n    item.session._setupstate.prepare(item)\n../../../.local/lib/python3.6/site-packages/_pytest/runner.py:452: in prepare\n    raise e\n../../../.local/lib/python3.6/site-packages/_pytest/runner.py:449: in prepare\n    col.setup()\n../../../.local/lib/python3.6/site-packages/_pytest/python.py:1647: in setup\n    self._request._fillfixtures()\n../../../.local/lib/python3.6/site-packages/_pytest/fixtures.py:568: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\n../../../.local/lib/python3.6/site-packages/_pytest/fixtures.py:581: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\n../../../.local/lib/python3.6/site-packages/_pytest/fixtures.py:601: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n../../../.local/lib/python3.6/site-packages/_pytest/fixtures.py:687: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n../../../.local/lib/python3.6/site-packages/_pytest/fixtures.py:1072: in execute\n    result = hook.pytest_fixture_setup(fixturedef=self, request=request)\n../../../.local/lib/python3.6/site-packages/pluggy/hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n../../../.local/lib/python3.6/site-packages/pluggy/manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n../../../.local/lib/python3.6/site-packages/pluggy/manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n../../../.local/lib/python3.6/site-packages/_pytest/fixtures.py:1126: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfixturefunc = <function setup at 0x7f0d53981598>\nrequest = <SubRequest 'setup' for <Function test_caf_search>>\nkwargs = {'request': <SubRequest 'setup' for <Function test_caf_search>>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[_FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> _FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[_FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n>               raise ValueError(f\"{request.fixturename} did not yield a value\") from None\nE               ValueError: setup did not yield a value\n\n../../../.local/lib/python3.6/site-packages/_pytest/fixtures.py:927: ValueError\n", "test_name": "test_caf_search", "rerun": "0"}}, "suite_name": "test_happycase1.py"}}}, "date": "September 30, 2022", "start_time": 1664523498.7356324, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}